Про ECS есть много материалов вы интернете.
Вот, например, хорошая статья на хабре:
https://m.habr.com/ru/post/358108/

Поскольку времени было мало и изначально
ECS вообще не планировался, то реализация
получилась неэффективной (что не критично в подобной игре)
и не слишком правильной.
Тем не менее основную задачу он выполняет:
логику можно писать для конкретных компонент,
не заботясь о том, какие ентити их содержат.
Т. е., например, чтобы объект мог рисоваться,
нужно лишь добавить ему компоненты, необходимые
для отрисовки (и инициализировать их).
Сама логика для отрисовки находится в
соответствующей системе и не требует
реализации для каждого нового типа объекта.

Пример:
    ecs::Apply<CompPos, CompMoveDir>([&](ecs::IEntity *movable)
    {
        CompMoveDir *dir = movable->GetComp<CompMoveDir>();
        CompPos *pos = movable->GetComp<CompPos>();

        if (movable->GetComp<TagCollidable>())
        {
            bool canMove = true;
            ecs::Apply<TagCollidable>([&](ecs::IEntity *collidable)
            {
                CompPos *colPos = collidable->GetComp<CompPos>();
                CompPosPattern *colPattern = collidable->GetComp<CompPosPattern>();
                if (colPos)
                {
                    if (pos->v + dir->v == colPos->v)
                        canMove = false;
                }
                else if (colPattern)
                {
                    if (colPattern->positions.IsPosExists(pos->v.x + dir->v.x, pos->v.y + dir->v.y))
                        canMove = false;
                }
            });
            if (canMove)
                pos->v += dir->v;
        }
        else
        {
            pos->v += dir->v;
        }
    });

Функция ecs::Apply() выполнит переданную лямбду для всех
ентити (передаются по указателю), у которых есть заданные в шаблоне компоненты.
В данном случае найдет всё то, что может двигаться.
Если у сущности есть коллижен, то проверяем, не сталкивается ли она с другими
сущностями с коллиженом, и только если нет, двигаем ее.
Иначе просто двигаем ентити.

Вот как, например, можно сделать вращающийся вокруг
существа файербол:
1. Делаем новый тип ентити с позицией, id тайла,
   зоной атаки и ссылкой на
   владельца, у которого будет файербол.
   + нужно задать "сторону конфликта", чтобы
   не атаковало своих (опционально)
2. Делаем систему, которая будет обновлять
   позицию в зависимости от позиции владельца.
   (можно прямо в OnUpdate() файербола).

Все. Теперь при создании существа,
если хочется сделать ему файербол, нужно только создать
ентити-файербол и инициализировать его компоненты.


Далее конкретно по коду:

Сущности и системы сейчас одно и то же по сути.
Только у системы нет компонент. Но OnUpdate() есть у всех.
Т. о., если нужна логика для конкретного ентити, то лучше
писать ее прямо в OnUpdate() ентити (что противоречит принципам
ECS, но это не важно).
Если нужно выполнить код при создании entity (при разрушении),
то делать это нужно не в конструкторе (деструкторе), а в
override функциях OnCreated() (OnDestroy()).
(В конструкторе EntityDesc ентити еще не инициализирован).

Для удобства все сущности объявляются в EcsEntities.h,
системы в EcsSystems.h, компоненты в EcsComponents.h.
Там же внизу файлов их нужно регистрировать.
Если компонента должна устанавливаться из строки, то
в ней должна быть функция FromString(const char *str).

Поскольку порядок выполнения систем играет значение (например,
гуи должен рисоваться после мира), то есть файл EcsOrder.cpp,
в котором можно задать порядок выполнения entity.
В forward указываются системы, которые выполняются вначале в указанном
порядке, в backward (в прямом порядке) - в конце. Остальное выполняется
в произвольном порядке между forward и backward.

Основные функции:

ecs::Apply<components>(func) - уже описана.

ecs::IEntity::GetComp<compType() - возвращает указатель
на компоненту или nullptr, если ее нет у ентити.
Пример this->GetComp<CompPos>() - вернет указатель позицию текущей ентити.
С компонентой можно делать что угодно (читать / изменять).

ecs::IEntity::SetComp(compName, strValue) - устанавливает значение ентити по
по строке. Например, ent->SetComp("CompPos", "1/2") установт позицию
в (1, 2). Возвращает true, если компонента была найдена, false иначе.

ecs::EntityManager::CreateEntity<entityType>(args...) - создает ентити
с заданными значениями компонент (компоненты не обязательно передавать).

Остальное вроде должно быть понятно, что делает.
В коде есть примеры.
Формат уровней:

// комментарий

Чтение происходит по парам ключ = значение,
т. о. можно хоть в одну строчку писать все.
Закрывающая скобка должна быть отделена разделяющим
символом (недоработки парсера).
Но значения должны быть одним словом.
Чтобы записать три координаты, например,
вместо пробелов используется слэш:
pos = 10/20/30

Уровень состоит из "заголовочного" файла,
в котором просто перечислены остальные
файлы уровня с указанием слоя, на котором
каждый находится, и, соответственно этих файлов.
Получается так:

layer {
  _filename = <filename>
  _layer = <layer number>
}
...

Остальные файлы описывают части уровеня:
все блоки опциональны

map {
  _filename = <имя сжатой без потерь картинки>
  // TODO добавить смещение
}

texture {
  _name = <имя текстуры>
  _filename = <имя файла>
}

tile {
  _name = <имя тайла>
  _texture = <имя текстуры>
  _textureRect = x/y/width/height
}

entity {
  _type = <тип ентити, зарегистрированного 
     через ECS_REGISTER_ENTITY> // обязательно
  _tile = <имя тайла> // с этим тайлом ентити
                      // будет рисоваться
  _colorBinding = #<число из 6 16-ричных
    значений>
  _patterned = <1 или 0> // пока что указание
    // _patterned делает его true, а пропуск - false
    // само значение после '=' ничего не значит (нужно было быстро сделать)
  // далее перечисляеются компоненты в виде:
  <имя компоненты, корая есть у ентити>
  = <то, что будет передано в FromString() соответствщей
  компоненты>
}


Если задан _colorBinding (необходимо, чтобы у ентити
была компонента CompPos или CompPosPattern),
то в каждой точке заданной карты map, соответствующей
этому цвету, будет ентити с заданными характеристиками.
Если у ентити CompPosPattern (при этом необходимо добавить
_patterned = true в блок entity), а не CompPos, то будет создан
один ентити с паттерном, в который войдут все точки с
соответствующим цветом.

Если _colorBinding не задан, то CompPos ставится вручную.
CompPosPattern сейчас текстом задать нельзя.

Примеры есть в assets/debugLevel*.ll(.lvl)
